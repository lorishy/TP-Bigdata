{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misgo\\\\IPSSI\\\\M2\\\\1 - Big Data\\\\TPs\\\\TpBigData\\\\front\\\\src\\\\Components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// src/components/Chatbot.js\nimport React, { useState } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: 'Bonjour ! Comment puis-je vous aider aujourd\\'hui ?'\n  }]);\n  const [input, setInput] = useState('');\n\n  // Fonction pour envoyer le message à l'API Flask\n  const sendMessageToFlask = async message => {\n    try {\n      const response = await fetch('http://localhost:5550/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await response.json();\n      return data.message; // Retourne la réponse du serveur Flask\n    } catch (error) {\n      console.error('Erreur lors de l\\'envoi du message à Flask:', error);\n      return 'Désolé, une erreur s\\'est produite. Veuillez réessayer plus tard.'; // Message en cas d'erreur\n    }\n  };\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n    const userMessage = {\n      sender: 'user',\n      text: input\n    };\n    setMessages([...messages, userMessage]);\n    setInput('');\n\n    // Envoyer le message au serveur Flask et obtenir la réponse\n    const botResponseText = await sendMessageToFlask(input);\n    const botResponse = {\n      sender: 'bot',\n      text: botResponseText\n    };\n    setMessages(prevMessages => [...prevMessages, botResponse]);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSend();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === 'bot' ? 'bot-message' : 'user-message'}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Tapez votre message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"kJI6nyaPa0vtTij0zxEeNV8MZlQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","sendMessageToFlask","message","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","handleSend","trim","userMessage","botResponseText","botResponse","prevMessages","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","target","onKeyPress","onClick","_c","$RefreshReg$"],"sources":["C:/Users/misgo/IPSSI/M2/1 - Big Data/TPs/TpBigData/front/src/Components/Chatbot.js"],"sourcesContent":["// src/components/Chatbot.js\r\nimport React, { useState } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: 'bot', text: 'Bonjour ! Comment puis-je vous aider aujourd\\'hui ?' },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n\r\n  // Fonction pour envoyer le message à l'API Flask\r\n  const sendMessageToFlask = async (message) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5550/message', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message }),\r\n      });\r\n      const data = await response.json();\r\n      return data.message; // Retourne la réponse du serveur Flask\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'envoi du message à Flask:', error);\r\n      return 'Désolé, une erreur s\\'est produite. Veuillez réessayer plus tard.'; // Message en cas d'erreur\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim() === '') return;\r\n\r\n    const userMessage = { sender: 'user', text: input };\r\n    setMessages([...messages, userMessage]);\r\n    setInput('');\r\n\r\n    // Envoyer le message au serveur Flask et obtenir la réponse\r\n    const botResponseText = await sendMessageToFlask(input);\r\n\r\n    const botResponse = {\r\n      sender: 'bot',\r\n      text: botResponseText,\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, botResponse]);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>Chatbot</h2>\r\n      <div className=\"chat-window\">\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${msg.sender === 'bot' ? 'bot-message' : 'user-message'}`}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-area\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Tapez votre message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        <button onClick={handleSend}>Envoyer</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}